  可靠的传输协议确保群组消息确实可靠传递，并以正确的顺序（先入先出，FIFO）传递到目的地。可靠的消息传递基础是正面和非正面的确认消息（ACK和NAK）。在ACK模式中，发送者重新发送该消息，直到从接收者接收到确认。在NAK模式，接收者请求重新传输时，它发现了一个缺失。

UNICAST
  UNICAST协议在发送单播消息时使用。UNICAST协议使用ACK模式，它的配置也在JGroups <config>中，注意，如果底层传输协议使用TCP，UNICAST则不需要配置，因为TCP传输本身就可以保证消息传输时能够FIFO。如下为UNICAST协议配置示例。
  <UNICAST timeout="300,600,1200,2400,3600"/>
UNICAST协议只包含一个属性：
  timeout 确定重新传输的超时时间（毫秒）。例如，如果timeout值为100，200，400，800，如果消息发送者在等待100毫秒还没有接收到消息接收者的ACK消息，则消息发送者重新发送消息（第一次重发），消息发送者继续等待200毫秒仍然没有接收到ACK消息，则消息发送者再次重新发送消息（第二次重发），这样直到等待800毫秒进行第四次重发。如果第一次重发的等待时间很小，消息可能被重发两次（发送者收到ACK消息大于等待时间）。等待时间较大（如1000，2000，4000）可以提高网络传输性能，特别是在网络环境可以确保UDP数据包不会丢失的环境中。当然如果时间较大，且UDP数据包丢失频繁发生，在这种环境下传输性能很低，因为重传的等待时间很大。

NAKACK
  NAKACK协议在发送多播消息时使用。NAKACK协议使用NAK模式。在这种协议下，每个消息绑定一个序列号，消息接收者根据序列号确保消息按正确的顺序传递。如果接收者发现了一个序列号的缺失，接收者安排一个周期性的任务去要求发送者重新发送该序列号的消息，当缺失的序列号的消息收到，则任务取消。NAKACK协议也是配置在JGroups <config>中，如下为一配置示例。
  <pbcast.NAKACK max_xmit_size="60000" use_mcast_xmit="false" retransmit_timeout="300,600,1200,2400,4800" gc_lag="0" discard_delivered_msgs="true"/>



